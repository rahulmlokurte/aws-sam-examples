image: python:3.9
include: /configuration.yml

stages:
  - build
  - deploy

build:
  stage: build
  before_script:
    - pip3 install awscli --upgrade
    - pip3 install aws-sam-cli --upgrade
    - assume_role_output=$(aws sts assume-role --role-arn "arn:aws:iam::${aws_account_id}:role/${sam_role}" --role-session-name "$session_name")
    - access_key_id=$(echo "$assume_role_output" | jq -r ".Credentials.AccessKeyId")
    - secret_access_key=$(echo "$assume_role_output" | jq -r ".Credentials.SecretAccessKey")
    - session_token=$(echo "$assume_role_output" | jq -r ".Credentials.SessionToken")
    - export AWS_ACCESS_KEY_ID="access_key_id"
    - export AWS_SECRET_ACCESS_KEY="secret_access_key"
    - export AWS_SESSION_TOKEN="session_token"

  script:
    - sam build --template-file template.yaml
  artifacts:
    name: "out"
    paths:
      - .aws-sam
      - template.yaml
    expire_in: 30 days
  environment: test

deploy:
  stage: deploy
  dependencies:
    - build
  before_script:
    - pip3 install awscli --upgrade
    - pip3 install aws-sam-cli --upgrade
    - assume_role_output=$(aws sts assume-role --role-arn "arn:aws:iam::${aws_account_id}:role/${sam_role}" --role-session-name "$session_name")
    - access_key_id=$(echo "$assume_role_output" | jq -r ".Credentials.AccessKeyId")
    - secret_access_key=$(echo "$json_out" | jq -r ".Credentials.SecretAccessKey")
    - session_token=$(echo "$json_out" | jq -r ".Credentials.SessionToken")
    - export AWS_ACCESS_KEY_ID="access_key_id"
    - export AWS_SECRET_ACCESS_KEY="secret_access_key"
    - export AWS_SESSION_TOKEN="session_token"
  script:
    - sam package --template-file template.yaml --output-template-file packaged.yaml --s3-bucket "$bucket_name"
    - sam deploy --template-file packaged.yaml --stack-name $stack_name --s3-bucket "$bucket_name"
  artifacts:
    name: "out"
    paths:
      - .aws-sam
      - template.yaml
    expire_in: 30 days
  environment: test


